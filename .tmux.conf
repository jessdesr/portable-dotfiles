# vim: foldmethod=marker nowrap ts=4 sw=4 sts=4 et
#
# =================================================================================================================================
# General options {{{1
# =================================================================================================================================
#
# set-option [-agoqsuw] [-t target-session | target-window] option value
#       (alias: set)
#
#     Set a window option with -w (equivalent to the set-window-option command), a server option with -s, otherwise a session option.
#
#     If -g is specified, the global session or window option is set.  The -u flag unsets an option, so a session inherits the option
#     from the global options.  It is not possible to unset a global option.
#
#     The -o flag prevents setting an option that is already set.
#
#     The -q flag suppresses the informational message (as if the quiet server option was set).
#
#     With -a, and if the option expects a string or a style, value is appended to the existing setting.  For example:
#
#       set -g status-left "foo"
#       set -ag status-left "bar"
#
#     Will result in `foobar'.  And:
#
#       set -g status-style "bg=red"
#       set -ag status-style "fg=blue"
#
#     Will result in a red background and blue foreground.  Without -a, the result would be the default background and a blue fore-
#     ground.
#
#     Available window options are listed under set-window-option.
#
#     value depends on the option and may be a number, a string, or a flag (on, off, or omitted to toggle).
#
# =================================================================================================================================
#
# set-window-option [-agoqu] [-t target-window] option value
#       (alias: setw)
#
#     Set a window option.  The -a, -g, -o, -q and -u flags work similarly to the set-option command.
#
# =================================================================================================================================

set -g display-time 500
#      display-time time
#
# Set the amount of time for which status line messages and other on-screen indicators are displayed.  time is in millisec-
# onds.

set -g history-limit 5000
#      history-limit lines
#
# Set the maximum number of lines held in window history.  This setting applies only to new windows - existing window his-
# tories are not resized and retain the limit at the point they were created.

set -g base-index 1
#      base-index index
#
# Set the base index from which an unused index should be searched when a new window is created.  The default is zero.

set -g pane-base-index 1
#      pane-base-index index
#
# Like base-index, but set the starting index for pane numbers.

set -g default-command "reattach-to-user-namespace -l zsh"
#      default-command shell-command
#
# Set the command used for new windows (if not specified when the window is created) to shell-command, which may be any sh(1) command.  The
# default is an empty string, which instructs tmux to create a login shell using the value of the default-shell option.
#
# Norman says: This is for https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
# and requires previously running `brew install reattach-to-user-namespace`.

# =================================================================================================================================
# Window options {{{1
# =================================================================================================================================

set -g set-titles on
#      set-titles [on | off]
#
# Attempt to set the client terminal title using the tsl and fsl terminfo(5) entries if they exist.  tmux automatically
# sets these to the \e]2;...\007 sequence if the terminal appears to be an xterm.  This option is off by default.  Note
# that elinks will only attempt to set the window title if the STY environment variable is set.

setw -g allow-rename on
#       allow-rename [on | off]
#
# Allow programs to change the window name using a terminal escape sequence (\033k...\033\\).  The default is on.

setw -g automatic-rename on
#       automatic-rename [on | off]
#
# Control automatic window renaming.  When this setting is enabled, tmux will rename the window automatically using the format specified by
# automatic-rename-format.  This flag is automatically disabled for an individual window when a name is specified at creation with new-window
# or new-session, or later with rename-window, or with a terminal escape sequence.  It may be switched off globally with:
# set-window-option -g automatic-rename off

set -g visual-activity on
#      visual-activity [on | off]
#
# If on, display a status line message when activity occurs in a window for which the monitor-activity window option is
# enabled.

setw -g monitor-activity on
#       monitor-activity [on | off]
#
# Monitor for activity in the window.  Windows with activity are highlighted in the status line.

setw -g aggressive-resize on
#       aggressive-resize [on | off]
#
# Aggressively resize the chosen window.  This means that tmux will resize the window to the size of the smallest session
# for which it is the current window, rather than the smallest session to which it is attached.  The window may resize when
# the current window is changed on another sessions; this option is good for full-screen programs which support SIGWINCH
# and poor for interactive programs such as shells.

setw -g main-pane-height 30
#       main-pane-height height
#
# Set the height of the main (top) pane in the main-horizontal layout.
# (Norman says: This option affects tmuxinator.)

# =================================================================================================================================
# Color options {{{1
# =================================================================================================================================
#
# message-command-style style
#
#     Set status line message command style, where style is a comma-separated list of characteristics to be specified.
#
#     These may be `bg=colour' to set the background colour, `fg=colour' to set the foreground colour, and a list of attributes as specified
#     below.
#
#     The colour is one of: black, red, green, yellow, blue, magenta, cyan, white, aixterm bright variants (if supported: brightred, brightgreen,
#     and so on), colour0 to colour255 from the 256-colour set, default, or a hexadecimal RGB string such as `#ffffff', which chooses the closest
#     match from the default 256-colour set.
#
#     The attributes is either none or a comma-delimited list of one or more of: bright (or bold), dim, underscore, blink, reverse, hidden, or
#     italics, to turn an attribute on, or an attribute prefixed with `no' to turn one off.
#
#     Examples are:
#
#       fg=yellow,bold,underscore,blink
#       bg=black,fg=default,noreverse
#
#     With the -a flag to the set-option command the new style is added otherwise the existing style is replaced.

set -g default-terminal "xterm-256color"
#      default-terminal terminal
#
# Set the default terminal for new windows created in this session - the default value of the TERM environment variable.
# For tmux to work correctly, this must be set to `screen' or a derivative of it.

set -g status-fg white
set -g status-bg black
# status colors

setw -g window-status-current-fg black
setw -g window-status-current-bg green
setw -g window-status-current-attr dim
# active window colors

setw -g window-status-fg green
setw -g window-status-bg black
setw -g window-status-attr dim
# inactive window colors

set -g pane-border-fg colour238
set -g pane-border-bg default
set -g pane-active-border-fg brightcyan
set -g pane-active-border-bg default
# regular and active pane colors

set -g message-fg white
set -g message-bg colour22
set -g message-attr bright
# command line colors

# =================================================================================================================================
# Status formatting options {{{1
# =================================================================================================================================
#
# status-left string
#
# Display string (by default the session name) to the left of the status bar.  string will be passed through strftime(3) and formats (see
# FORMATS) will be expanded.  It may also contain any of the following special character sequences:
#
#   Character pair    Replaced with
#   #(shell-command)  First line of the command's output
#   #[attributes]     Colour or attribute change
#   ##            A literal `#'
#
# The #(shell-command) form executes `shell-command' and inserts the first line of its output.  Note that shell commands are only executed
# once at the interval specified by the status-interval option: if the status line is redrawn in the meantime, the previous result is used.
# Shell commands are executed with the tmux global environment set (see the ENVIRONMENT section).
#
#   For details on how the names and titles can be set see the NAMES AND TITLES section.  For a list of allowed attributes see the
#   message-command-style option.
#
# Examples are:
#
#   #(sysctl vm.loadavg)
#   #[fg=yellow,bold]#(apm -l)%%#[default] [#S]
#
# Where appropriate, special character sequences may be prefixed with a number to specify the maximum length, for example `#24T'.
#
# By default, UTF-8 in string is not interpreted, to enable UTF-8, use the status-utf8 option.

set -g status-left ""
#      status-left string
#
# Display string (by default the session name) to the left of the status bar.

set -g status-right ""
#      status-right string
#
# Display string to the right of the status bar.

setw -g window-status-format "#[fg=black]#[bg=brightblack] #I #[bg=black]#[fg=brightblack] #W "
#       window-status-format string
#
# Set the format in which the window is displayed in the status line window list.  See the status-left option for details of special charac-
# ter sequences available.  The default is `#I:#W#F'.

setw -g window-status-current-format "#[bg=brightblue]#[fg=black] #I #[fg=brightcyan]#[bg=black] #W "
#       window-status-current-format string
#
# Like window-status-format, but is the format used when the window is the current window.

# =================================================================================================================================
# Mouse options {{{1
# =================================================================================================================================

setw -g mode-mouse on
#       mode-mouse [on | off | copy-mode]
#
# Mouse state in modes.  If on, the mouse may be used to enter copy mode and copy a selection by dragging, to enter copy
# mode and scroll with the mouse wheel, or to select an option in choice mode.  If set to copy-mode, the mouse behaves as
# set to on, but cannot be used to enter copy mode.

set -g mouse-resize-pane on
#      mouse-resize-pane [on | off]
#
# If on, tmux captures the mouse and allows panes to be resized by dragging on their borders.

set -g mouse-select-pane on
#      mouse-select-pane [on | off]
#
# If on, tmux captures the mouse and when a window is split into multiple panes the mouse may be used to select the current
# pane.  The mouse click is also passed through to the application as normal.

set -g mouse-select-window on
#      mouse-select-window [on | off]
#
# If on, clicking the mouse on a window name in the status line will select that window.

# =================================================================================================================================
# Keybindings and keybinding options {{{1
# =================================================================================================================================
# 
# tmux allows a command to be bound to most keys, with or without a prefix key.  When specifying keys, most represent themselves (for exam-
# ple `A' to `Z').  Ctrl keys may be prefixed with `C-' or `^', and Alt (meta) with `M-'.  In addition, the following special key names are
# accepted: Up, Down, Left, Right, BSpace, BTab, DC (Delete), End, Enter, Escape, F1 to F20, Home, IC (Insert), NPage/PageDown/PgDn,
# PPage/PageUp/PgUp, Space, and Tab.  Note that to bind the `"' or `'' keys, quotation marks are necessary, for example:
#
#   bind-key '"' split-window
#   bind-key "'" new-window
#
# Commands related to key bindings are as follows:
#
# bind-key [-cnr] [-t key-table] key command [arguments]
#       (alias: bind)
#
#     Bind key key to command.  By default (without -t) the primary key bindings are modified (those normally activated with the prefix
#     key); in this case, if -n is specified, it is not necessary to use the prefix key, command is bound to key alone.  The -r flag
#     indicates this key may repeat, see the repeat-time option.
#
#     If -t is present, key is bound in key-table: the binding for command mode with -c or for normal mode without.  To view the
#     default bindings and possible commands, see the list-keys command.
#
# list-keys [-t key-table]
#       (alias: lsk)
#
#     List all key bindings.  Without -t the primary key bindings - those executed when preceded by the prefix key - are printed.
#
#     With -t, the key bindings in key-table are listed; this may be one of: vi-edit, emacs-edit, vi-choice, emacs-choice, vi-copy or
#     emacs-copy.
#
# send-keys [-lR] [-t target-pane] key ...
#       (alias: send)
#
#     Send a key or keys to a window.  Each argument key is the name of the key (such as `C-a' or `npage' ) to send; if the string is
#     not recognised as a key, it is sent as a series of characters.  The -l flag disables key name lookup and sends the keys liter-
#     ally.  All arguments are sent sequentially from first to last.  The -R flag causes the terminal state to be reset.
#
# send-prefix [-2] [-t target-pane]
#
#     Send the prefix key, or with -2 the secondary prefix key, to a window as if it was pressed.
#
# unbind-key [-acn] [-t key-table] key
#       (alias: unbind)
#
#     Unbind the command bound to key.  Without -t the primary key bindings are modified; in this case, if -n is specified, the command
#     bound to key without a prefix (if any) is removed.  If -a is present, all key bindings are removed.
#
#     If -t is present, key in key-table is unbound: the binding for command mode with -c or for normal mode without.
#
# =================================================================================================================================

set -sg escape-time 1
#       escape-time time
#
# Set the time in milliseconds for which tmux waits after an escape is input to determine if it is part of a function or
# meta key sequences.  The default is 500 milliseconds.

set -g repeat-time 1000
#      repeat-time time
#
# Allow multiple commands to be entered without pressing the prefix-key again in the specified time milliseconds (the
# default is 500).  Whether a key repeats may be set when it is bound using the -r flag to bind-key.  Repeat is enabled for
# the default keys bound to the resize-pane command.

# ------------------------------------
# General bindings {{{2
# ------------------------------------

unbind C-b
# unbind the default prefix key 

set -g prefix C-a
# set the prefix key

bind a send-prefix
# <prefix> a <command> sends <command> to a tmux within this tmux

bind r source-file ~/.tmux.conf \; display "Reloaded tmux config file."
# <prefix> r reloads this config file

# ------------------------------------
# Built-in Vim key binding modes {{{2
# ------------------------------------

set -g status-keys vi
#      status-keys [vi | emacs]
#
# Use vi or emacs-style key bindings in the status line, for example at the command prompt.	The default is emacs, unless the VISUAL or
# EDITOR environment variables are set and contain the string `vi'.

setw -g mode-keys vi
#       mode-keys [vi | emacs]
#
# Use vi or emacs-style key bindings in copy and choice modes.  As with the status-keys option, the default is emacs, unless VISUAL or EDITOR
# contains `vi'.

# ------------------------------------
# Window navigation bindings {{{2
# ------------------------------------

bind n next-window
# next window

bind N previous-window
# previous window

# ------------------------------------
# Pane navigation bindings {{{2
# ------------------------------------

bind v split-window -h -p 50
# split horizontally into two panes, with new pane 50% of width

bind s split-window -v -p 10
# split window vertically into two panes, with new pane 10% of width

bind C-a swap-pane -Dd
# swaps panes without changing the active pane

bind p select-pane -t :.+
# cycles panes

bind -r h resize-pane -L 30
bind -r j resize-pane -D 1
bind -r k resize-pane -U 1
bind -r l resize-pane -R 30
# resize panes, using vim keys

bind x kill-pane
# close current pane without confirmation prompt
