[core]
    autocrlf = input
    safecrlf = warn
    editor = vim # or nano (if you prefer)
[color]
    ui = true
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[alias]
    # show aliases
    la = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t = \\2/' 

    # add
    a  = add                          # stage     modified         created
    au = add --update .               # stage all modified deleted        
    aa = add --all    .               # stage all modified deleted created

    ai = add -i                       # stage interactive

    ap = add --patch                  # stage commits chunk by chunk
    chunkyadd = add --patch           # stage commits chunk by chunk

    ae = add -e                       # stage commits by manually editing patch

    # apply
    apc = apply --stat                # see stats before patching
    apc = apply --check               # check before patching

    # am
    ams = am --signoff                # Usage: git ams < fixes.patch

    # branch
    b = branch --color=always -vv     # branch alias to add color and verbosity
    ba = branch -a --color=always -vv # show all branches

    # bundle
    bc = bundle create                # git bundle create repo.bundle master

    # commit
    c = commit                        # commit
    cm = commit -m                    # commit with message
    amend = commit --amend --no-edit  # amend last commit without changing commit message
    amendm = commit --amend           # amend last commit and change commit message

    # checkout
    co = checkout                     # checkout
    cb = checkout -b                  # create and switch to a new branch

    # cherry-pick
    cp = cherry-pick -x -s            # cherry pick

    # diff
    d     = diff --word-diff=color                   # unstaged changes

    dc    = diff --word-diff=color --cached          # staged changes
    dcu   = diff --word-diff=color --cached -U1000   # staged changes, with context

    dh    = diff --word-diff=color HEAD              # changes between last commit and (both staged and unstaged changes)
    dhu   = diff --word-dfff=color HEAD  -U1000      # changes between last commit and (both staged and unstaged changes), with context

    last  = diff --word-diff=color HEAD^             # changes between second-last commit and (both staged and unstaged changes)
    lastu = diff --word-diff=color HEAD^ -U1000      # changes between second-last commit and (both staged and unstaged changes), with context

    # format-patch
    fps = format-patch --stdout       # Usage: git fps [ <since> | <revision range> ] > fixes.patch

    # fetch
    f = fetch                         # update local copy of remote repository

    # grep
    grep = grep --break --show-function --function-context

    # log
    l   = log --graph --abbrev-commit --decorate --all                      --format=format:'%C(bold dim magenta)%h %C(reset)%C(bold blue)%aD %C(reset)%C(green)(%ar)%C(reset)%C(bold red)%d %n''        %C(reset)%C(white)%s %C(reset)%C(dim yellow)<%aN>%C(reset)'
    ll  = log --stat  --abbrev-commit --decorate --all                      --format=format:'%C(bold dim magenta)%h %C(reset)%C(bold blue)%aD %C(reset)%C(green)(%ar)%C(reset)%C(bold red)%d %n''        %C(reset)%C(white)%s %C(reset)%C(dim yellow)<%aN>%C(reset)'
    lll = log --graph --abbrev-commit --decorate --all -p --word-diff=color --format=format:'%C(bold dim magenta)%h %C(reset)%C(bold blue)%aD %C(reset)%C(green)(%ar)%C(reset)%C(bold red)%d %n''        %C(reset)%C(white)%s %C(reset)%C(dim yellow)<%aN>%C(reset)'
    # git log --grep="something appearing in a commit message"

    # merge
    merge = merge --no-ff
    mergeff = merge --ff-only

    # ls-files
    index = ls-files --stage          # show contents of .git/index for current directory
    ls = ls-files . --exclude-standard

    # push
    pd = push --delete                # git push --delete origin remote-branch-to-delete

    # rebase
    rb = rebase                       # rebase
    rbc = rebase --continue           # continue rebase
    rbs = rebase --skip               # skip rebase

    # remote
    r = remote -v                     # show remotes (verbose)
    origininfo = remote show origin   # show info about origin

    # refs
    refs = show-ref                   # show refs
    reflog = reflog                   # show log of changes to refs

    # reset
    rh          = reset --hard        # discard unstaged changes and revert working tree to HEAD state
    unstage     = reset HEAD          # unstage files
    chunkyreset = reset --patch HEAD  # unstage file hunks selectively
    uncommit    = reset --soft  HEAD^ # go back before last commit, with files in uncommitted state
    undocommit  = reset --soft  HEAD^ # go back before last commit, with files in uncommitted state

    filelog = log -u                  # show changes to a file
    mt = mergetool                    # fire up the merge tool

    sha1 = ls-tree master             # shows hashes of files in current folder

    show = show --word-diff=color     # shows the lines in a commit (instead of using git diff HEAD~3 HEAD~2

    # stash
    ss = stash save                   # stash changes with name (save changes and add to stack)
    sl = stash list                   # list stashes
    sp = stash pop                    # apply stash (restore changes and pop from stack)
    sa = stash apply                  # apply stash (restore changes without popping from stack)
    sd = stash drop                   # drop stashes (destory changes)

    ssh0 = stash show -p --stat --word-diff=color stash@{0}
    ssh1 = stash show -p --stat --word-diff=color stash@{1}
    ssh2 = stash show -p --stat --word-diff=color stash@{2}
    ssh3 = stash show -p --stat --word-diff=color stash@{3}
    ssh4 = stash show -p --stat --word-diff=color stash@{4}
    ssh5 = stash show -p --stat --word-diff=color stash@{5}

    # status
    s = status
    #s = status -s -b -uall

    # tag
    t = tag 
    taglist = tag -l -n1              # show tag list with first line of tag annotation or commit message

    # svn helpers
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

    # plumbing
    cf = cat-file      # `git cat-file` on a tree object will mess up your terminal; use ls-tree for tree objects
    lst = ls-tree                      
    ui = update-index
    wt = write-tree
    ct = commit-tree

    # maintenance
    gc = gc
    fsck = fsck --full
    count-objects = count-objects -v
[apply]
    whitespace = nowarn
[branch]
    autosetupmerge = true
[diff]
    mnemonicprefix = true
[grep]
    linenumber = true
    patterntype = perl
[merge]
    summary = true
    verbosity = 1
    conflictstyle = diff3
[mergetool]
    prompt = false
[push]
    default = simple
