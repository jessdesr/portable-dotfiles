[core]
    autocrlf = input
    safecrlf = warn
    editor = vim
[color]
    ui = true
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[alias]
    # show aliases
    la = "!git config -l | grep alias | cut -c 7-"

    # add
    a = add                           # add
    ai = add -i                       # add interactive

    ap = add --patch                  # stage commits chunk by chunk
    chunkyadd = add --patch           # stage commits chunk by chunk

    # branch
    b = branch -v                     # branch (verbose)
    origininfo = remote show origin   # show info about origin

    # commit
    cm = commit -m                    # commit with message
    cAm = commit -Am                  # commit all with message
    c = commit                        # commit
    amend = commit --amend            # amend last commit (to fix commit message: git commit --amend -m "fixed msg")

    # checkout
    co = checkout                     # checkout
    cb = checkout -b                  # create and switch to a new branch

    # cherry-pick
    cp = cherry-pick -x               # grab a change from a branch

    # diff
    dc = diff --cached                # staged changes
    ds = diff --staged                # staged changes
    dcu = diff --cached -U1000        # staged changes, with context
    dsu = diff --staged -U1000        # staged changes, with context

    d = diff                          # unstaged changes

    dh = diff HEAD                    # changes between last commit and (both staged and unstaged changes)
    dhu = diff -U1000 HEAD            # changes between last commit and (both staged and unstaged changes), with context

    last = diff HEAD^                 # changes between second-last commit and (both staged and unstaged changes)
    lastu = diff -U1000 HEAD^         # changes between second-last commit and (both staged and unstaged changes), with context

    # fetch
    f = fetch                         # update local copy of remote repository

    # log
    l = log --graph --abbrev-commit --decorate --format=format:'%C(bold dim magenta)%h %C(reset)%C(bold blue)%aD %C(reset)%C(green)(%ar)%C(reset)%C(bold red)%d %n''        %C(reset)%C(white)%s %C(reset)%C(dim yellow)<%aN>%C(reset)' --all
    logfull = log --graph --pretty=full
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    changelog = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

    # git log --grep="something appearing in a commit message"

    # merge
    merge = merge --no-ff

    # ls-files
    ls = ls-files . --exclude-standard
    li = ls-files . --exclude-standard --others --ignored
    
    pod = push origin --delete        # delete remote branch <BRANCHNAME>

    # rebase
    rc = rebase --continue            # continue rebase
    rs = rebase --skip                # skip rebase

    # remote
    r = remote -v                     # show remotes (verbose)

    # refs
    refs = show-ref                   # show refs
    reflog = reflog                   # show log of changes to refs

    # reset
    unstage = reset HEAD              # remove files from index (tracking)
    undocommit = reset --soft HEAD^   # go back before last commit, with files in uncommitted state
    rsh = reset --soft HEAD^          # go back before last commit, with files in uncommitted state
    chunkyreset = reset --patch       # selectively unstage hunks

    filelog = log -u                  # show changes to a file
    mt = mergetool                    # fire up the merge tool

    sha1 = ls-tree master             # shows hashes of files in current folder

    show = show                       # shows the lines in a commit (instead of using git diff HEAD~3 HEAD~2

    # stash
    ss = stash save                   # stash changes with name (save changes and add to stack)
    sl = stash list                   # list stashes
    sp = stash pop                    # apply stash (restore changes and pop from stack)
    sa = stash apply                  # apply stash (restore changes without popping from stack)
    sd = stash drop                   # drop stashes (destory changes)

    # status
    s = status                        # status
    st = status                       # status
    stat = status                     # status

    # tag
    t = tag -n                        # show tags with <n> lines of each tag message

    # svn helpers
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

    # maintenance
    count-objects = count-objects -v
    gc = gc
    fsck = fsck --full

[format]
    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
    prompt = false
[merge]
    summary = true
    verbosity = 1
    tool = vimdiff
    conflictstyle = diff3
[apply]
    whitespace = nowarn
[branch]
    autosetupmerge = true
[push]
    # 'git push' will push the current branch to its tracking branch
    # the usual default is to push all branches
    default = simple
[diff]
    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true
