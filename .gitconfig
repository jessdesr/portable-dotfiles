[core]
    autocrlf     = input
    safecrlf     = warn
    editor       = vim # or nano (if you prefer)
[color]
    ui           = true
[color "branch"]
    current      = yellow reverse
    local        = yellow
    remote       = green
[color "diff"]
    meta         = yellow bold
    frag         = magenta bold
    old          = red bold
    new          = green bold
[alias]
    # show aliases
    la = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t = \\2/' 
    sa = !git la

    # add
    a   = add                                # stage modified created
    a2  = add ../../                         # stage modified created                 in 2  levels above
    a3  = add ../../../                      # stage modified created                 in 3  levels above
    a4  = add ../../../../                   # stage modified created                 in 4  levels above
    a5  = add ../../../../../                # stage modified created                 in 5  levels above
    a6  = add ../../../../../../             # stage modified created                 in 6  levels above
    a7  = add ../../../../../../../          # stage modified created                 in 7  levels above
    a8  = add ../../../../../../../../       # stage modified created                 in 8  levels above
    a9  = add ../../../../../../../../../    # stage modified created                 in 9  levels above
    a10 = add ../../../../../../../../../../ # stage modified created                 in 10 levels above

    au  = add --update :/                    # stage modified         deleted         in entire tree
    aa  = add -A                             # stage modified created deleted 
    aaf = add -Af                            # stage modified created deleted ignored

    ap = add -p                              # stage commits chunk by chunk

    ae = add -e                              # stage commits by manually editing patch

    ane = !git a -N $1 && git a -e $1 # add intent and manually edit patch (for untracked files)

    w = !git add --all . && git commit -m wip

    # apply
    apc = apply --stat   # see stats before patching
    apc = apply --check  # check before patching

    # am
    ams = am --signoff   # Usage: git ams < fixes.patch

    # bisect
    bs = bisect

    # branch
    b   = branch -vv --list --contains @                                       # show info about current branch
    bd  = branch -D                                                            # force delete branch
    bu  = !git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD` # if current branch is foo, then origin/foo is set as the upstream tracking branch for foo

    bm  = branch -vv --list --merged @ 
    bnm = branch -vv --list --no-merged @ 

    # bundle
    bunc = bundle create                 # Usage: git bunc repo.bundle master

    # clean
    cdf  = clean -df                     # force delete untracked files and directories
    cdf2 = clean -df ../../              # force delete untracked files and directories
    cdf3 = clean -df ../../../           # force delete untracked files and directories

    # clone
    cl           = clone --recursive     # clone (including submodules)
    cloen        = clone                 # clone (catch typo)
    shallowclone = clone --depth 1       # shallow clone
    shcl         = clone --depth 1       # shallow clone (short form)
    shallowcloen = clone --depth 1       # shallow clone (catch typo)

    # commit
    c         = commit                   # commit
    cm        = commit -m                # commit with message
    mc        = commit -m                # commit with message (catch typo)
    amend     = commit --amend --no-edit # tack on additional changes from staged files to the last commit, without editing the commit message
    amen      = commit --amend --no-edit # tack on additional changes from staged files to the last commit, without editing the commit message (catch typo)
    amendm    = commit --amend           # tack on additional changes from staged files to the last commit, editing the commit message
    anmend    = commit --amend           # tack on additional changes from staged files to the last commit, editing the commit message (catch typo)
    amnedm    = commit --amend           # tack on additional changes from staged files to the last commit, editing the commit message (catch typo)
    amnedm    = commit --amend           # tack on additional changes from staged files to the last commit, editing the commit message (catch typo)

    cc        = commit -C                # commit with same message and timestamp as some ref
    cclast    = commit -C @              # commit with same message and timestamp as last commit

    amenddate   = "!f() { git commit --amend --no-edit --date=\"$(date)\"; }; f" # amend last commit's timestamp to now without changing commit message
    amendnow    = "!f() { git commit --amend --no-edit --date=\"$(date)\"; }; f" # amend last commit's timestamp to now without changing commit message
    amendme     = commit --amend --reset-author
    amendauthor = commit --amend --reset-author

    cmb       = commit -m 'build'        # commit with 'build' message

    cmempty   = commit --allow-empty -m  # commit empty commit with message

    # checkout
    co       = checkout       # checkout
    cb       = checkout -b    # create and switch to a new branch
    col      = checkout @{-1} # checkout last branch

    track    = !sh -c 'git checkout -t ${2:-origin}/${1}' -  # Usage: git track feature --> checks out a branch called feature that tracks origin/feature
    tr       = !git track
    cot      = !git track

    coours   = "!f() { git checkout --ours   $@ && git add $@; }; f"
    cotheirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    # cherry-pick
    cp  = cherry-pick -x -s      # cherry pick
    cpn = cherry-pick -n         # cherry pick changes and stage them, but don't commit
    cpa = cherry-pick --abort    # abort    cherry pick when in a conflict
    cpc = cherry-pick --continue # continue cherry pick when in a conflict

    # diff
    d     = diff --word-diff=color                   # unstaged changes
    du    = diff --word-diff=color -U1000            # unstaged changes, with context
    ds    = diff --word-diff=color --stat            # unstaged changes, stats
    da    = diff --word-diff=color -a                # unstaged changes, treating all files as text

    dc    = diff --word-diff=color --cached          # staged changes
    dcu   = diff --word-diff=color --cached -U1000   # staged changes, with context
    dcs   = diff --word-diff=color --cached --stat   # staged changes, stats

    dh    = diff --word-diff=color HEAD              # changes between last commit and (both staged and unstaged changes)
    dhu   = diff --word-diff=color HEAD  -U1000      # changes between last commit and (both staged and unstaged changes), with context

    last  = diff --word-diff=color HEAD^             # changes between second-last commit and (both staged and unstaged changes)
    lastu = diff --word-diff=color HEAD^ -U1000      # changes between second-last commit and (both staged and unstaged changes), with context

    dbase   = diff --base   --word-diff=color
    dours   = diff --ours   --word-diff=color
    dtheirs = diff --theirs --word-diff=color

    # fixup
    fu = !git add --all . && git commit --fixup=@    # add all updated and deleted; then commit with message "fixup! ... @'s message"

    # format-patch
    fps = format-patch --stdout                      # Usage: git fps [ <since> | <revision range> ] > fixes.patch

    # fetch
    f  = fetch         # fetch
    fo = fetch origin  # fetch changes from the origin remote
    fa = fetch --all   # fetch changes from all remotes

    # grep
    grep = grep --break --show-function --function-context

    ignore = !([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore # git ignore <path-to-file-to-add-to-.gitignore>
    ig     = !([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore # git ignore <path-to-file-to-add-to-.gitignore>

    # initial commit
    in = !git init && git add . && git commit -m \"initial commit\"

    # log
    l   = log --graph --abbrev-commit --decorate --all --date=rfc-local                                                                                       --format='%C(bold magenta)%h %C(reset)%C(bold blue)%ad %C(reset)%C(green)(%ar)%C(reset)%C(bold red)%d %n''        %C(reset)%C(white)%s %C(reset)%C(yellow)<%aN>%C(reset)'
    ll  = log --graph --abbrev-commit --decorate --all --date=rfc-local --stat --stat-width=240 --stat-name-width=200 --stat-graph-width=40 --stat-count=1000 --format='%C(bold magenta)%h %C(reset)%C(bold blue)%ad %C(reset)%C(green)(%ar)%C(reset)%C(bold red)%d %n''        %C(reset)%C(white)%s %C(reset)%C(yellow)<%aN>%C(reset)'
    lll = log --graph --abbrev-commit --decorate --all --date=rfc-local -p --word-diff=color --pretty=fuller

    # log and grep commit message
    lg       = !sh -c 'git l   --grep=\"$0\"'
    llg      = !sh -c 'git ll  --grep=\"$0\"'
    lllg     = !sh -c 'git lll --grep=\"$0\"'

    # log and search string of code
    ls       = !sh -c 'git l   -S\"$0\"'
    lls      = !sh -c 'git ll  -S\"$0\"'
    llls     = !sh -c 'git lll -S\"$0\"'

    # log and showing commits since some date string
    # Example usage: git lsince "24 hours ago"
    lsince   = !sh -c 'git l   --since=\"$0\"'
    llsince  = !sh -c 'git ll  --since=\"$0\"'
    lllsince = !sh -c 'git lll --since=\"$0\"'

    # log and showing commits since some date string authored by you
    # Example usage: git lsince "24 hours ago"
    lmesince   = !sh -c 'git l   --since=\"$0\" --author=\"$(git config user.name)\"'
    llmesince  = !sh -c 'git ll  --since=\"$0\" --author=\"$(git config user.name)\"'
    lllmesince = !sh -c 'git lll --since=\"$0\" --author=\"$(git config user.name)\"'

    # log and showing commits since some date string authored by someone
    # Example usage: git lsomeonesince "24 hours ago" Bob
    lsomeonesince   = !sh -c 'git l   --since=\"$0\" --author=\"$1\"'
    llsomeonesince  = !sh -c 'git ll  --since=\"$0\" --author=\"$1\"'
    lllsomeonesince = !sh -c 'git lll --since=\"$0\" --author=\"$1\"'

    # log and ancestry path
    lap      = !sh -c 'git l   --ancestry-path \"$0\"'
    llap     = !sh -c 'git ll  --ancestry-path \"$0\"'
    lllap    = !sh -c 'git lll --ancestry-path \"$0\"'

    pending = !sh -c 'git --no-pager log "$0"/HEAD..HEAD && echo'   # show commits that haven't been pushed to the remote yet
    lconflicts = log --min-parents=2 -p --cc                        # show merge commits, and only those with conflicts will displayed with diffs
    lcon       = log --min-parents=2 -p --cc                        # show merge commits, and only those with conflicts will displayed with diffs

    # show branch
    sb = show-branch

    # merge
    mergeff = merge --ff-only
    mergesq = merge --squash --no-commit # A "Squashed commit of the following" message is only auto-generated if there are no conflicts (which can be ensured by merging master into feature first)
    ma      = merge --abort

    # ls-files
    lsfiles = ls-files . --exclude-standard
    index = ls-files --stage          # show contents of .git/index for current directory

    # push
    pish   = push                     # catch typo
    psuh   = push                     # catch typo
    pd     = push --delete            # git push --delete origin remote-branch-to-delete
    mirror = push --mirror            # git mirror private-backup-repo
    pom    = push -u origin master
    puom   = push -u origin master
    poum   = push -u origin master

    # pull rebase
    pullrb = pull --rebase            # git fetch + git rebase onto FETCH_HEAD
    prb    = pull --rebase            # git fetch + git rebase onto FETCH_HEAD

    # pull changes, show commits since last pull/push
    pullwithlog = !sh -c 'git pull "$0" HEAD && git log --pretty=format:\"%Cred%ae %Creset- %C(yellow)%s %Creset(%ar)\" HEAD@{1}..'

    # rebase
    rb  = rebase --autosquash -i      # rebase interactive with autosquash
    rba = rebase --abort              # abort    rebase when in a conflict
    rbc = rebase --continue           # continue rebase when in a conflict
    rbs = rebase --skip               # skip     rebase when in a conflict
    rebaes = rebase                   # catch typo

    # remote
    r = remote -v                     # show remotes (verbose)
    origininfo = remote show origin   # show info about origin
    remoet = remote                   # catch typo

    # refs
    refs = show-ref                   # show refs
    rl   = reflog show --date=relative --format='%C(bold magenta)%h %C(reset)%C(bold red)%gd %C(reset)%C(cyan)%gs %n        %C(reset)%C(bold blue)%aD %C(reset)%C(green)(%ar) %n        %C(reset)%C(white)%s %C(reset)%C(yellow)<%aN> %n'
    rlco = !sh -c 'git rl | grep \"checkout: moving from\" -A0 | head -n 20'
    rlcoall = !sh -c 'git rl | grep \"checkout: moving from\" -A0'

    # reset
    unstage     = reset HEAD          # unstage files
    unsatge     = reset HEAD          # unstage files (catch typo)
    usntage     = reset HEAD          # unstage files (catch typo)
    us          = reset HEAD          # unstage files
    rh          = reset --hard        # discard unstaged changes and revert working tree to HEAD state
    setto       = reset --hard        # goto ref
    seto        = reset --hard        # goto ref
    undoto      = reset --mixed       # undo to ref, with files unstaged
    goto        = reset --mixed       # go   to ref, with files unstaged
    un          = reset --mixed HEAD^ # go back to commit before latest commit, with files from latest commit left unstaged
    und         = reset --mixed HEAD^ # go back to commit before latest commit, with files from latest commit left unstaged
    undo        = reset --mixed HEAD^ # go back to commit before latest commit, with files from latest commit left unstaged
    unro        = reset --mixed HEAD^ # go back to commit before latest commit, with files from latest commit left unstaged (catch typo)
    uncommit    = reset --mixed HEAD^ # go back to commit before latest commit, with files from latest commit left unstaged
    undocommit  = reset --mixed HEAD^ # go back to commit before latest commit, with files from latest commit left unstaged
    undostaged  = reset --soft  HEAD^ # go back before last commit, with files staged
    chunkyreset = reset --patch HEAD  # unstage file hunks selectively
    chunkyunstage = reset --patch HEAD# unstage file hunks selectively
    wipe        = !git add --all && git commit --quiet -m 'WIPE SAVEPOINT' && git reset HEAD~1 --hard # use git reflog to get back to this unreachable commit

    filelog = log -u                  # show changes to a file
    mt = mergetool                    # fire up the merge tool

    sha1 = ls-tree master             # shows hashes of files in current folder

    # show
    sh   = show --word-diff=color                        # show changes in a commit, with colored word diffs
    shs  = show --word-diff=color --stat                       # show changes in a commit, with colored word diffs, with stats
    shu  = show --word-diff=color -U1000                 # show changes in a commit, with colored word diffs, and surrounding context
    sha  = show --word-diff=color -a                           # show changes in a commit, with colored word diffs, treating all files as text
    shp  = !sh -c 'git diff --word-diff=color $0^1 $0'   # show changes between the 1st parent of a rev and the rev itself, with colored word diffs
    shp1 = !sh -c 'git diff --word-diff=color $0^1 $0'   # show changes between the 1st parent of a rev and the rev itself, with colored word diffs
    shp2 = !sh -c 'git diff --word-diff=color $0^2 $0'   # show changes between the 1st parent of a rev and the rev itself, with colored word diffs
    shps = !sh -c 'git diff --word-diff=color --stat $0^1 $0'  # show changes between the 1st parent of a rev and the rev itself, with statistics
    shmc = diff-tree --cc                                # show changes made in resolving a merge conflict (this command is only meaningful if given a merge conflict rev)

    # rev-list
    rlist = rev-list --format=%B --max-count=1 # Usage: git rlist @ shows full hash of HEAD and commit message

    # rev-parse
    rp = rev-parse                          # Usage: git rp @ shows the full hash of HEAD

    # shortlog
    ppl = shortlog -n -s -e

    # squash
    # Usage: git squash s1 master     Checks out a new branch called s1 and creates a squashed commit of all commits from master to HEAD
    squash = !sh -c 'git checkout -b $0 && git reset --hard $1 && git merge --squash --ff-only HEAD@{1} && git commit -F .git/SQUASH_MSG'

    # review
    # Usage: git review               Backs up current commit, creates a squashed commit of all commits from HEAD to HEAD's origin branch, sets original branch to remote branch with changes unstaged, ready for selective restaging
    review = !sh -c 'git checkout -b `date +'%Y-%b%d-%H%M%p-bu'` && git checkout @{-1} && git checkout origin/`git rev-parse --abbrev-ref HEAD` && git checkout HEAD@{1} && git checkout -b `date +'%Y-%b%d-%H%M%p-sq'` && git reset --hard HEAD@{2} && git merge --squash --ff-only HEAD@{1} && git commit -F .git/SQUASH_MSG && git checkout @{-5} && git reset --hard @{-1} && git reset --mixed HEAD^'

    # stash
    ss  = stash save                   # stash changes with name (save changes and add to stack)
    sl  = stash list                   # list stashes
    sp  = stash pop                    # apply stash (restore changes and pop from stack)
    sap = stash apply                  # apply stash (restore changes without popping from stack)
    sdd = stash drop                   # drop stashes (destory changes)

    ssh0 = stash show -p --stat --word-diff=color stash@{0}
    ssh1 = stash show -p --stat --word-diff=color stash@{1}
    ssh2 = stash show -p --stat --word-diff=color stash@{2}
    ssh3 = stash show -p --stat --word-diff=color stash@{3}
    ssh4 = stash show -p --stat --word-diff=color stash@{4}
    ssh5 = stash show -p --stat --word-diff=color stash@{5}

    # status
    s = status
    #s = status -s -b -uall

    # tag
    t = tag 
    taglist = tag -l -n1              # show tag list with first line of tag annotation or commit message

    # plumbing
    cf = cat-file      # `git cat-file` on a tree object will mess up your terminal; use ls-tree for tree objects
    lst = ls-tree                      
    ui = update-index
    wt = write-tree
    ct = commit-tree
    cobj = count-objects --verbose --human-readable

    # maintenance
    gc = gc
    fsck = fsck --full
    count-objects = count-objects -v

    # removes remote branches that have been merged into HEAD
    cleanremotes = !"f() { git branch -r --merged | cut -d \\  -f 3 | while read branch; do test `git rev-parse $branch` == `git rev-parse HEAD` && echo \"skipping branch $branch\" || (echo \"deleting branch $branch\" && echo $branch | sed 's/\\//\\ :/' | xargs -t git push ); done }; f"

    # submodule
    sm     = submodule
    smur   = submodule update --remote
    smfepm = submodule foreach "git checkout master && git pull origin master"

    # update all remotes, pruning removed tracking branches
    updateremotes = remote update --prune

    #########################
    ### `git-svn` aliases ###
    #########################

    # show aliases
    svnla = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t = \\2/' | grep svn
    svnsa = !git svnla
    sasvn = !git svnla
    lasvn = !git svnla

    # svn help (also note that `git svn` is like --help)
    svnh     = help svn
    svnhelp  = help svn

    # svn clone
    svncl    = svn clone
    svnclone = svn clone
    svncloen = svn clone

    # svn create-ignore and show-ignore
    svnci    = svn create-ignore
    svnsi    = svn show-ignore
    svnsix   = !git svn show-ignore >> .git/info/exclude

    # svn log
    svnl     = svn log --show-commit --oneline
    svnll    = svn log --show-commit --verbose

    # svn blame
    svnbl    = svn blame --git-format
    svnblame = svn blame --git-format

    # svn fetch
    svnf     = svn fetch

    # svn dcommit
    svnd     = svn dcommit -v          # verbose
    svndn    = svn dcommit -v -n       # verbose dry-run

    # Special command used for copying commits from a remote git repo to a remote svn repo
    #
    # Mnemonic: port n' dcommit
    #
    # Assumptions:
    #   - `git svn clone` was originally used to set up the current local repo
    #   - `svn-tracker` is a pre-existing branch with some remote-tracking branch (usually `origin/svn-tracker`)
    #
    # Only run this command when:
    #   - `master` is currently checked out
    #
    # Effects:
    #   1.  Create a temporary local branch `temp-svnpnd` to backup the current commit
    #   2.  Create a timestamped local branch to backup the current commit
    #   3.  Rebase `master` on top of `git-svn`
    #   4.  Verbosely `git svn dcommit`
    #   5.  Check out the `svn-tracker` branch
    #   6.  Fast-forward merge `git-svn` into `svn-tracker`
    #   7.  Push `svn-tracker` to its remote-tracking branch
    #   8.  Check out `master`
    #   9.  Set `master` back to `temp-svnpnd`
    #   10. Force delete `temp-svnpnd`
    #
    # Notes:
    #   - it's ok (but not recommended) to run this command even when `master` is not
    #     up-to-date with its upstream tracking branch
    svnpnd = !sh -c 'git checkout -b temp-svnpnd && git checkout -b `date +'%Y-%b%d-%H%M%p-bu'` && git checkout @{-2} && git rebase git-svn && git svn dcommit -v && git checkout svn-tracker && git merge --ff-only git-svn && git push && git checkout master && git reset --hard temp-svnpnd && git branch -D temp-svnpnd'

    ###################################
    ### less used `git-svn` aliases ###
    ###################################

    # svn rebase (instead of rebasing, prefer `git svn fetch` and then `git rebase trunk`, `git rebase git-svn`, or whatever is the SVN mainline)
    svnrb    = svn rebase
    svnrbn   = svn rebase -n           # dry-run
    svnrbl   = svn rebase --local

    # svn info
    svni     = svn info
    svninfo  = svn info
[apply]
    whitespace = nowarn
[branch]
    autosetupmerge = true
[diff]
    mnemonicprefix = true
    renameLimit = 999999
[diff "bin"]
    textconv = hexdump -v -C
[diff "pdf"]
    textconv = pdfinfo
[diff "zip"]
    textconv = unzip -v
[grep]
    linenumber = true
    patterntype = perl
[merge]
    defaultToUpstream = true
    summary = true
    branchdesc = true
    log = 1000
    verbosity = 5
    tool = vimdiff
    conflictstyle = diff3
    ff = false
[mergetool]
    prompt = false
[push]
    default = current
[rebase]
    autosquash = true
[rerere]
    enabled = false
    autoupdate = true
[http]
    postBuffer = 1048576000
